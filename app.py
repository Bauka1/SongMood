from openai import OpenAI
import streamlit as st
from transformers import pipeline
from deep_translator import GoogleTranslator
from googleapiclient.discovery import build

# --- üîë API –∫–ª—é—á–∏ ---
OPENAI_API_KEY = "sk-proj-uzlloZ4aJ0y2tCskJu9uj2d7JQX8Hf7ieDK0HiFB2pHXQgtH6krarWAh_JsxAp4CItzwUzXbOGT3BlbkFJR9bEC-2ZXXiIni0UoIsVCWPvq9ZT9oYitzinuHR5U45qu6Dcng3h0I_H5i9W2NpXvQFWN4SkEAQ"
YOUTUBE_API_KEY = "AIzaSyB6RlfddksDOhIX95ah7PKIOkcEf81XUbc"

client = OpenAI(api_key=OPENAI_API_KEY)
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

# --- –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π ---
emotion_classifier = pipeline(
    "text-classification",
    model="j-hartmann/emotion-english-distilroberta-base",
    return_all_scores=True
)

# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ ---
emotion_emojis = {
    "joy": "üòÑ",
    "sadness": "üò¢",
    "anger": "üò°",
    "fear": "üò®",
    "love": "‚ù§Ô∏è",
    "surprise": "üò≤"
}

# --- –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –Ω–∞ YouTube ---
def search_youtube(song_name):
    try:
        request = youtube.search().list(
            q=song_name,
            part="snippet",
            type="video",
            maxResults=1
        )
        response = request.execute()
        if response["items"]:
            item = response["items"][0]
            video_id = item["id"]["videoId"]
            title = item["snippet"]["title"]
            thumbnail = item["snippet"]["thumbnails"]["high"]["url"]
            url = f"https://www.youtube.com/watch?v={video_id}"
            return {"title": title, "thumbnail": thumbnail, "url": url}
    except Exception as e:
        print("YouTube API error:", e)
    return None

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Å–Ω–∏ —Å –ø–æ–º–æ—â—å—é OpenAI ---
def suggest_song(emotion, text):
    prompt = f"""
    –ù–∞–π–¥–∏ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–µ—Å–Ω—é, –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
    –≠–º–æ—Ü–∏—è: {emotion}.
    –û–ø–∏—Å–∞–Ω–∏–µ: "{text}".
    –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ".
    """
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=50
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("OpenAI API error:", e)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é üòî"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="üé∂ SongMood AI", layout="centered")
st.title("üéß SongMood ‚Äî –ú—É–∑—ã–∫–∞ –ø–æ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é")

st.write("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ), –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–µ—Å–Ω–∏ üéµ")

text_input = st.text_area("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")

if st.button("üéß –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é"):
    if not text_input.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        # 1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        translated = GoogleTranslator(source='auto', target='en').translate(text_input)
        st.info(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: *{translated}*")

        # 2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        predictions = emotion_classifier(translated)[0]
        sorted_preds = sorted(predictions, key=lambda x: x['score'], reverse=True)
        main_emotion = sorted_preds[0]['label']
        emoji = emotion_emojis.get(main_emotion, "üôÇ")

        # 3Ô∏è‚É£ –í—ã–≤–æ–¥ —ç–º–æ—Ü–∏–∏ (–≤–∏–∑—É–∞–ª—å–Ω–æ)
        st.markdown(f"### {emoji} –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: **{main_emotion.capitalize()}**")

        # 4Ô∏è‚É£ –ë–µ—Ä—ë–º —Ç–æ–ø-2 —ç–º–æ—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
        strong_emotions = [p for p in sorted_preds if p['score'] > 0.2][:2]

        # 5Ô∏è‚É£ –ü–æ–¥–±–æ—Ä –ø–µ—Å–µ–Ω
        st.subheader("üéµ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:")
        for e in strong_emotions:
            emotion_name = e['label']
            song = suggest_song(emotion_name, translated)
            song_info = search_youtube(song)

            if song_info:
                st.markdown(f"**{emotion_emojis.get(emotion_name, 'üé∂')} {emotion_name.capitalize()} ‚Äî {song_info['title']}**")
                st.image(song_info['thumbnail'], width=320)
                st.markdown(f"[‚ñ∂Ô∏è –°–ª—É—à–∞—Ç—å –Ω–∞ YouTube]({song_info['url']})")
                st.markdown("---")
            else:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è {emotion_name}")

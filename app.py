from openai import OpenAI
import streamlit as st
from transformers import pipeline
from deep_translator import GoogleTranslator
from googleapiclient.discovery import build
import re

# --- üîë API –∫–ª—é—á–∏ ---
OPENAI_API_KEY = "sk-proj-uzlloZ4aJ0y2tCskJu9uj2d7JQX8Hf7ieDK0HiFB2pHXQgtH6krarWAh_JsxAp4CItzwUzXbOGT3BlbkFJR9bEC-2ZXXiIni0UoIsVCWPvq9ZT9oYitzinuHR5U45qu6Dcng3h0I_H5i9W2NpXvQFWN4SkEAQ"
YOUTUBE_API_KEY = "AIzaSyB6RlfddksDOhIX95ah7PKIOkcEf81XUbc"

client = OpenAI(api_key=OPENAI_API_KEY)
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

# --- –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π ---
emotion_classifier = pipeline(
    "text-classification",
    model="j-hartmann/emotion-english-distilroberta-base",
    return_all_scores=True
)

# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏ ---
emotion_emojis = {
    "joy": "üòÑ",
    "sadness": "üò¢",
    "anger": "üò°",
    "fear": "üò®",
    "love": "‚ù§Ô∏è",
    "surprise": "üò≤"
}

# --- üîô –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–µ—Å–Ω–∏ –ø–æ —ç–º–æ—Ü–∏—è–º ---
fallback_songs = {
    "joy": ["Pharrell Williams - Happy", "Katy Perry - Roar", "Bruno Mars - Uptown Funk"],
    "sadness": ["Adele - Someone Like You", "Lewis Capaldi - Someone You Loved", "Billie Eilish - When The Party‚Äôs Over"],
    "anger": ["Linkin Park - Numb", "Eminem - Lose Yourself", "Rage Against The Machine - Killing In The Name"],
    "fear": ["Imagine Dragons - Demons", "Billie Eilish - Bury A Friend", "Radiohead - Creep"],
    "love": ["Ed Sheeran - Perfect", "John Legend - All Of Me", "Elvis Presley - Can‚Äôt Help Falling In Love"],
    "surprise": ["Coldplay - Viva La Vida", "Queen - Bohemian Rhapsody", "BTS - Dynamite"]
}

# --- –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–º–∞–π–ª–æ–≤ ---
def clean_text(text):
    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # —Å–º–∞–π–ª—ã
        u"\U0001F300-\U0001F5FF"  # —Å–∏–º–≤–æ–ª—ã
        u"\U0001F680-\U0001F6FF"
        u"\U0001F1E0-\U0001F1FF"
        "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', text)

# --- –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –Ω–∞ YouTube ---
def search_youtube(song_name):
    try:
        request = youtube.search().list(
            q=f"{song_name} official music video",
            part="snippet",
            type="video",
            videoCategoryId="10",  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è Music
            maxResults=1,
            order="relevance"
        )
        response = request.execute()
        if response["items"]:
            item = response["items"][0]
            video_id = item["id"]["videoId"]
            title = item["snippet"]["title"]
            thumbnail = item["snippet"]["thumbnails"]["high"]["url"]
            url = f"https://www.youtube.com/watch?v={video_id}"
            # –ò—Å–∫–ª—é—á–∞–µ–º Shorts
            if "shorts" not in url.lower() and "shorts" not in title.lower():
                return {"title": title, "thumbnail": thumbnail, "url": url}
    except Exception as e:
        print("YouTube API error:", e)
    return None

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Å–µ–Ω GPT ---
def suggest_song_list(emotion, text):
    prompt = f"""
    –ù–∞–∑–æ–≤–∏ 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Å–µ–Ω, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ —ç–º–æ—Ü–∏—é "{emotion}".
    –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞:
    1. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ
    2. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ
    ...
    """
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=150
        )
        content = response.choices[0].message.content.strip()
        songs = re.findall(r"\d+\.\s*(.+)", content)
        return songs if songs else None
    except Exception as e:
        print("OpenAI API error:", e)
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="üé∂ SongMood AI", layout="centered")
st.title("üéß SongMood ‚Äî –ú—É–∑—ã–∫–∞ –ø–æ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é")

st.write("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ), –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–±–µ—Ä—ë—Ç –ø–µ—Å–Ω–∏ üéµ")

text_input = st.text_area("‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")

if st.button("üéß –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é"):
    if not text_input.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        # üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–º–∞–π–ª–æ–≤
        cleaned_text = clean_text(text_input)

        # 1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        translated = GoogleTranslator(source='auto', target='en').translate(cleaned_text)
        st.info(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: *{translated}*")

        # 2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        predictions = emotion_classifier(translated)[0]
        sorted_preds = sorted(predictions, key=lambda x: x['score'], reverse=True)
        main_emotion = sorted_preds[0]['label']
        emoji = emotion_emojis.get(main_emotion, "üôÇ")

        st.markdown(f"### {emoji} –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: **{main_emotion.capitalize()}**")

        # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω
        songs = suggest_song_list(main_emotion, translated)

        if not songs:
            st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –æ—Ç GPT. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
            songs = fallback_songs.get(main_emotion, ["Imagine Dragons - Believer"])

        # 4Ô∏è‚É£ –ü–æ–∏—Å–∫ –Ω–∞ YouTube
        st.subheader("üéµ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:")
        for song in songs:
            song_info = search_youtube(song)
            if song_info:
                st.markdown(f"**{emoji} {song_info['title']}**")
                st.image(song_info['thumbnail'], width=320)
                st.markdown(f"[‚ñ∂Ô∏è –°–ª—É—à–∞—Ç—å –Ω–∞ YouTube]({song_info['url']})")
                st.markdown("---")
            else:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ: {song}")

import streamlit as st
from transformers import pipeline
from deep_translator import GoogleTranslator

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
emotion_classifier = pipeline(
    "text-classification",
    model="j-hartmann/emotion-english-distilroberta-base",
    return_all_scores=True
)

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Å–µ–Ω –ø–æ–¥ —ç–º–æ—Ü–∏–∏
songs = {
    "joy": ["Happy - Pharrell Williams", "Good Life - OneRepublic"],
    "sadness": ["Someone Like You - Adele", "Fix You - Coldplay"],
    "anger": ["Breaking the Habit - Linkin Park", "Killing in the Name - RATM"],
    "fear": ["Creep - Radiohead", "Everybody Hurts - R.E.M."],
    "love": ["Perfect - Ed Sheeran", "All of Me - John Legend"],
    "surprise": ["Viva La Vida - Coldplay", "Firework - Katy Perry"]
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö —ç–º–æ—Ü–∏–π
russian_to_english = {
    "—Ä–∞–¥–æ—Å—Ç—å": "joy",
    "–≥—Ä—É—Å—Ç—å": "sadness",
    "–ø–µ—á–∞–ª—å": "sadness",
    "–∑–ª–æ—Å—Ç—å": "anger",
    "—Å—Ç—Ä–∞—Ö": "fear",
    "–ª—é–±–æ–≤—å": "love",
    "—É–¥–∏–≤–ª–µ–Ω–∏–µ": "surprise"
}

# Streamlit UI
st.set_page_config(page_title="üéµ SongMood", layout="centered")
st.title("üé∂ SongMood ‚Äî –ú—É–∑—ã–∫–∞ –ø–æ –≤–∞—à–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é")

st.write("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é:")

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —ç–º–æ—Ü–∏—é:")

if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å –º—É–∑—ã–∫—É"):
    if user_input.strip():
        user_input_lower = user_input.strip().lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–º–æ—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        if user_input_lower in songs.keys():
            main_emotion = user_input_lower
            st.success(f"üëâ –í—ã –≤—ã–±—Ä–∞–ª–∏ —ç–º–æ—Ü–∏—é: {main_emotion}")

        elif user_input_lower in russian_to_english.keys():
            main_emotion = russian_to_english[user_input_lower]
            st.success(f"üëâ –í—ã –≤—ã–±—Ä–∞–ª–∏ —ç–º–æ—Ü–∏—é: {user_input_lower} ({main_emotion})")

        else:
            # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
            translated_text = GoogleTranslator(source='auto', target='en').translate(user_input)
            st.info(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {translated_text}")

            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            predictions = emotion_classifier(translated_text)[0]
            sorted_preds = sorted(predictions, key=lambda x: x['score'], reverse=True)
            main_emotion = sorted_preds[0]['label']
            st.success(f"üëâ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: {main_emotion}")

        # –ü–æ–¥–±–æ—Ä –ø–µ—Å–µ–Ω
        if main_emotion in songs:
            st.subheader("üéß –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:")
            for song in songs[main_emotion]:
                st.write(f"- {song}")
        else:
            st.error("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–π —ç–º–æ—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Å–µ–Ω –≤ –±–∞–∑–µ.")
    else:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —ç–º–æ—Ü–∏—é.")
